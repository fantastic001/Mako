#!python

from mako.lib.schedule import * 
from mako.lib.ams import * 
from mako.lib.reporting import * 
from mako.lib.reporting.month import * 
from mako.lib.reporting.quarter import * 
from mako.lib.table import * 
from mako.desktop import * 

import sys
import os 


import datetime 

from easy_widgets import * 

#mem = MakoMemoryDatabase(frequency=3, db=MakoDesktopDatabase(path="%s/.mako/db" % os.environ["HOME"]))

mem = MakoDesktopDatabase(path="%s/.mako/db/" % os.environ["HOME"])

Application.addColor("task", "dark red", "")
Application.addColor("task_done", "dark green", "")

Application.init()

# Projects submenu ###########################################

def do_task(b, params):
    i,j,k = params
    projects = mem.downloadProjects()
    projects[i].getSubprojects()[j].getAllTasks()[k].increaseSpentTime(1)
    mem.uploadProjects(projects)
    subproject_menu(b, [i,j])


def delete_task(b, params):
    i,j,k = params
    projects = mem.downloadProjects()
    tasks = projects[i].getSubprojects()[j].getAllTasks().copy()
    projects[i].getSubprojects()[j].deleteAllTasks()
    for f in range(len(tasks)):
        if f != k:
            projects[i].getSubprojects()[j].addTask(tasks[f])
    mem.uploadProjects(projects)
    subproject_menu(b, [i,j])

def mark_task_done(b, params):
    i,j,k = params
    projects = mem.downloadProjects()
    projects[i].getSubprojects()[j].getAllTasks()[k].setDone()
    mem.uploadProjects(projects)
    subproject_menu(b, [i,j])

def task_menu(b, params):
    i,j,k = params
    task = mem.downloadProjects()[i].getSubprojects()[j].getAllTasks()[k]
    menu = MenuBox(task.getText())
    menu.addOption("Cancel", subproject_menu, params=[i,j])
    if not task.isDone():
        menu.addOption("Mark task as done", mark_task_done, params=[i,j,k])
        menu.addOption("Increase spent time on task", do_task, params=[i,j,k])
    menu.addOption("Delete", delete_task, params=[i,j,k])
    menu.exec()

def add_task(b, params):
    i,j = params
    def f(name):
        def g(t):
            def h(due):
                due = datetime.datetime.strptime(due, "%Y-%m-%d")
                expected = int(t)
                projects = mem.downloadProjects()
                projects[i].getSubprojects()[j].addTask(Task(name, expected, due=due))
                mem.uploadProjects(projects)
                subproject_menu(b, [i,j])
            TextInput("Enter due date", h).show()
        TextInput("Enter expected number of hours", g).show()
    TextInput("Task name", f).show()

def month_menu(b, params):
    i,j, month = params
    m,y = month
    subproject = mem.downloadProjects()[i].getSubprojects()[j]
    menu = Menu(subproject.getName())
    menu.addOption("Back", subproject_menu, params=[i,j])
    menu.addOption("Add new task", add_task, params=[i,j])
    for k in range(len(subproject.getAllTasks())):
        task = subproject.getAllTasks()[k]
        if task.getDueDate().month == m and task.getDueDate().year == y:
            color = "task"
            if task.isDone():
                color = "task_done"
            menu.addOption("%s | %s | %d | %d" % (
                task.getText(), 
                str(task.getDueDate()), 
                task.getExpectedTime(), 
                task.getSpentTime()
                ), task_menu, color, params=[i,j,k])
    menu.show()

def month_to_text(month):
    m,y = month
    return [
        "Jan",
        "Feb",
        "Mar",
        "Apr",
        "May",
        "Jun",
        "Jul",
        "aug",
        "Sep",
        "Oct",
        "Nov",
        "Dec"
    ][m-1] +"-"+ str(y)

def subproject_menu(b, params):
    i,j = params
    subproject = mem.downloadProjects()[i].getSubprojects()[j]
    menu = Menu(subproject.getName())
    menu.addOption("Back", project_menu, params=[i])
    menu.addOption("Add new task", add_task, params=[i,j])
    months = [] 
    for k in range(len(subproject.getAllTasks())):
        task = subproject.getAllTasks()[k]
        if (task.getDueDate().month, task.getDueDate().year) not in months:
            months.append((task.getDueDate().month, task.getDueDate().year))
    for month in months:
        color = "task"
        menu.addOption(month_to_text(month), month_menu, color, params=[i,j,month])
    menu.show()


def add_subproject(b, params):
    i = params[0]
    def haha(ans):
        projects = mem.downloadProjects()
        projects[i].addSubproject(ScheduleSubproject(ans))
        mem.uploadProjects(projects)
        project_menu(b, params=[i])
    TextInput("Enter subproject name", haha).show()

def project_menu(b, params):
    i = params[0]
    project = mem.downloadProjects()[i]
    menu = Menu(project.getName())
    menu.addOption("Add new subproject", add_subproject, params=[i])
    menu.addOption("Back", list_projects)
    for j in range(len(project.getSubprojects())):
        menu.addOption(project.getSubprojects()[j].getName(), subproject_menu, params=[i,j])
    menu.show()

def list_projects(b, params):
    projects = mem.downloadProjects()
    menu = Menu("Projects")
    menu.addOption("Back", lambda b,p: main())
    for i in range(len(projects)):
        menu.addOption(projects[i].getName(), project_menu, params=[i])
    menu.show()

# END Projects submenu ###########################################

# Tables submenu ######################

def edit_table_entry(b, p):
    i,j = p
    k = j+1
    def edit(ans):
        tables = mem.downloadTables()
        if ans != "":
            tables[i].updateEntry(k, ans.split("|"))
            mem.uploadTables(tables)
        show_table(b, [i])
    TextInput("Enter new entry values separated by '|'", edit).show()

def add_table_entry(b, p):
    i = p[0]
    def edit(ans):
        tables = mem.downloadTables()
        if ans != "":
            tables[i].addEntry(ans.split("|"))
            mem.uploadTables(tables)
        show_table(b, [i])
    TextInput("Enter entry values separated by '|'", edit).show()

def show_table(b, p):
    i = p[0]
    table = mem.downloadTables()[i]
    menu = Menu("%s <<<< %s" % (table.getName(), " | ".join(table.getFields())))
    menu.addOption("Back", lambda x,p: tables_menu())
    menu.addOption("Add entry", add_table_entry, params=[i])
    for j in range(len(table.getEntries())):
        entry = table.getEntries()[j]
        menu.addOption(" | ".join(entry), edit_table_entry, params=[i,j])
    menu.show()

def add_table(b, p):
    def next_step(name):
        def create(header):
            if header != "":
                table = Table(name, header.split("|"))
                tables = mem.downloadTables() 
                tables.append(table)
                mem.uploadTables(tables)
            tables_menu()
        if name != "":
            TextInput("Enter header fields separated by '|'", create).show()
        else:
            tables_menu()
    inputbox = TextInput("Enter table name", next_step).show()

def tables_menu():
    menu = Menu("Tables")
    menu.addOption("Back", lambda b,p: main())
    menu.addOption("Add table", add_table)
    tables = mem.downloadTables()
    for i in range(len(tables)):
        menu.addOption(tables[i].getName(), show_table, params=[i])
    menu.show()

# END Tables submenu ##################

# Measurements submenu ###############

def action_menu(b, p):
    i = p[0]
    data = mem.downloadMeasurementData(i)
    listing = Menu("Data")
    listing.addOption("Back", lambda b,p: measurements_menu())
    for d in data:
        listing.addOption("%s | %f" % (str(d[0]), d[1]), lambda x,p: 0)
    listing.show()
    
def measure_all(b, p):
    actions = mem.downloadMeasurementActions()
    ams = AMS()
    tables = mem.downloadTables()
    print(actions)
    for action in actions:
        metric = action
        data = mem.downloadMeasurementData(metric.getIdentifier())
        val = metric.measure(tables)
        data.append((datetime.date.today(), val))
        mem.uploadMeasurementData(metric.getIdentifier(), data)
    mem.save()
    MessageBox("Measurement", "Measurements are done and saved to database").exec()

def measurements_menu():
    actions = mem.downloadMeasurementActions()
    ams = AMS()
    menu = Menu("Measurements")
    menu.addOption("Back", lambda b,p: main())
    menu.addOption("Measure all", measure_all)
    for action in actions:
        menu.addOption(action.getIdentifier(), action_menu, params=[action.getIdentifier()])
    menu.show()

# END Measurement submenu

# Reports submenu 

class MonthCursesReportView(ReportView):
    def show(self, report):
        s = ""
        if report.getField("expected_time") == "":
            return
        s += "Total expected time for all tasks: %s\n" % report.getField("expected_time")
        s += "Tasks that have to be split\n"
        l = ["Project", "Subproject", "Task text"]
        table = Table("Tasks that have to be split", l)
        for task in report.getField("to_split"):
            table.addEntry([task["project"], task["subproject"], task["task"]])
        s += "\n" + str(table) + "\n"
        print("Expected time this month for each project")
        table = Table("Expected time this month for each project", ["Project name", "Expected time this month"])
        for p in report.getField("expected_per_project"):
            table.addEntry([p["project"], str(p["time"]) + "h"])
        s += str(table)
        MessageBox(report.getName(), s).exec()

class QuarterCursesReportView(ReportView):
    def show(self, report):
        if report.getField("subprojects") == "":
            return
        l = ["Project name", "Expected time", "Spent time"]
        table = Table("Quarter report", l)
        for project in report.getField("projects"):
            subprojects = report.getField("subprojects")[project]
            expected = 0
            real = 0
            for subproject in subprojects["subprojects"]:
                expected += int(subprojects["expected"][subproject])
                real += int(subprojects["real"][subproject])
            table.addEntry([project, str(expected), str(real)])
        MessageBox(report.getName(), str(table)).exec()

def show_report(b, p):
    r = p[0]
    view = MonthCursesReportView()
    view.show(r)
    view = QuarterCursesReportView()
    view.show(r)

def add_monthly_report(b, p):
    def gen(ans):
        if ans == "":
            reports_submenu()
        year = ans.split("-")[0]
        month = ans.split("-")[1]
        generator = MonthReportGenerator(mem.downloadProjects())
        generator.setup(int(year), int(month))
        report = generator.generate()
        reports = mem.downloadReports()
        reports.append(report)
        mem.uploadReports(reports)
        reports_submenu()
    TextInput("Enter year and month in the year to generate report. Format has to be YYYY-MM", gen).show()

def add_quarter_report(b, p):
    def gen(ans):
        if ans == "":
            reports_submenu()
        year = ans.split("-")[0]
        quarter = ans.split("-")[1]
        generator = QuarterReportGenerator(mem.downloadProjects())
        generator.setup(int(year), int(quarter), True, True)
        report = generator.generate()
        reports = mem.downloadReports()
        reports.append(report)
        mem.uploadReports(reports)
        reports_submenu()
    TextInput("Enter year and quarter in the year to generate report. Format has to be YYYY-Q", gen).show()

def reports_submenu():
    reports = mem.downloadReports()
    menu = Menu("Reports")
    menu.addOption("Back", lambda b,p: main())
    menu.addOption("Add monthly report", add_monthly_report)
    menu.addOption("Add quarter report", add_quarter_report)
    for report in reports:
        s = "%s | %s" % (report.getName(), str(report.getDate()))
        menu.addOption(s, show_report, params=[report])
    menu.show()

# END reports submenu 

def bye():
    #mem.save()
    Application.exit()

def main():
    menu = Menu("Mako main menu")
    menu.addOption("Projects", list_projects)
    menu.addOption("Tables", lambda x,p: tables_menu())
    menu.addOption("Reports", lambda x,p: reports_submenu())
    menu.addOption("Measurements", lambda x,p: measurements_menu())
    menu.addOption("Exit", lambda b,p: bye())
    menu.show()


main()

Application.run()

#mem.save()
